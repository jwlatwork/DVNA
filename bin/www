#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../dvna');
var debug = require('debug')('dvna:server');
var http = require('http');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var express = require('express');
var fs = require('fs');
var md = require('marked');
var path = require('path');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
//server.on('listening', onListening);
server.on('listening', environmentLoader);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on blah blah' + bind);
}

/**
 * Console ASCII UI
 */

function consoleSplash() {
    console.log("   ______            _        _______ ");
    console.log("  (  __  \\ |\\     /|( (    /|(  ___  )");
    console.log("  | (  \\  )| )   ( ||  \\  ( || (   ) |");
    console.log("  | |   ) || |   | ||   \\ | || (___) |");
    console.log("  | |   | |( (   ) )| (\\ \\) ||  ___  |");
    console.log("  | |   ) | \\ \\_/ / | | \\   || (   ) |");
    console.log("  | (__/  )  \\   /  | )  \\  || )   ( |");
    console.log("  (______/    \\_/   |/    )_)|/     \\|");

    console.log("\r\n   Damn Vulnerable Node Application ");

    console.log("  https://github.com/quantumfoam/DVNA \r\n");
    console.log("DVNA listening at: https://127.0.0.1:" + port + "/\n");
}

// TODO: This function is too long; break it up.
function environmentLoader() {

}